#!/usr/bin/env bash
set -e

### process recursion
if [[ "$strat" == 'rec' && "$proc" == 1 ]]; then

  (( $1 > 1 )) \
    && echo $(( `fibonacci $(($1-1))`+`fibonacci $(($1-2))` )) \
    || echo $1

### process pipe
elif [[ "$strat" == 'pipe' && "$proc" == 1 ]]; then

  if [[ "$1" ]]; then echo "$1" | fibonacci
  else n=`cat`
    (( n > 1 )) \
      && echo $(( `echo $((n-1)) | fibonacci`+`echo $((n-2)) | fibonacci` )) \
      || echo $n
  fi

### recursion
elif [[ "$strat" == 'rec' ]]; then

  function fibonacci {
    (( $1 > 1 )) \
      && echo $(( `fibonacci $(($1-1))`+`fibonacci $(($1-2))` )) \
      || echo $1
  }
  fibonacci $1

### pipe
elif [[ "$strat" == 'pipe' ]]; then

  function fibonacci {
    local n=`cat`
    (( n > 1 )) && echo $(( `echo $((n-1)) | fibonacci`+`echo $((n-2)) | fibonacci` )) || echo $n
  }
  echo "$1" | fibonacci

### process tail
elif [[ "$strat" == 'tail' && "$proc" == 1 ]]; then

  if [[ "$3" ]]; then
    (( $1 == 0 )) && echo $2 || fibonacci $(($1-1)) $3 $(($2+$3))
  else
    fibonacci $1 0 1
  fi
  
### trampoline
elif [[ "$strat" == 'tram' ]]; then

  function trampoline {
    until false; do
      [[ "$tram" ]] && local tram=`$tram` || local tram=$@
      echo $tram | grep -vq "^$1.*\$" && echo $tram && break ||:
    done
  }

  function fibonacci {
    (( $1 == 0 )) && echo $2 || echo fibonacci $(($1-1)) $3 $(($2+$3))
  }

  trampoline 'fibonacci' $1 0 1

### eval
elif [[ "$strat" == 'eval' ]]; then
  
  fauxbonacci='(( #1 == 0 )) && echo #2 || eval `fibonacci $((#1-1)) #3 $((#2+#3))`'

  function fibonacci {
    local f="${fauxbonacci//'#1'/"$1"}"
    f="${f//'#2'/"$2"}"
    echo "${f//'#3'/"$3"}"
  }

  eval `fibonacci $1 0 1`

### tail
elif [[ "$strat" == 'tail' ]]; then

  function fibonacci {
    (( $1 == 0 )) && echo $2 || fibonacci $(($1-1)) $3 $(($2+$3))
  }

  fibonacci $1 0 1

### loop
elif [[ "$strat" == 'loop' ]]; then

  for (( n=i=0, m=1; i < $1; sum=n+m, n=m, m=sum, ++i )); do :; done
  # n=0 i=0 m=1; while (( i < $1 )); do let sum=n+m; n=$m; m=$sum; let ++i; done
  # [[ "$1" == 0 ]] && n=0 || for (( sum=$1, n=m=1; sum > 2; n+=$m, m=$n, --sum )); do :; done
  echo $n

elif [[ "$1" == 'all' ]]; then shift && [[ "$1" == 'time' ]] && time=true && shift || :

  function print_fibonacci {
    local message="$strat"
    [[ "$proc" == 1 ]] && message="$message proc"
    echo -e "\e[0;\e[0;35m$message\e[0m"
    [[ "$time" ]] && time fibonacci $1 || fibonacci $1
    echo
  }

  strat=loop proc= print_fibonacci $1
  strat=tail proc= print_fibonacci $1
  strat=eval proc= print_fibonacci $1
  strat=tram proc= print_fibonacci $1
  strat=tail proc=1 print_fibonacci $1
  (( $1 > 16 )) && read -rep "continue with stack destroyer n=$1? "
  strat=rec proc= print_fibonacci $1
  strat=pipe proc= print_fibonacci $1
  strat=rec proc=1 print_fibonacci $1
  strat=pipe proc=1 print_fibonacci $1

elif [[ ! "$strat" ]]; then strat=loop fibonacci $1
else echo "
idk how to '$strat'
usage:
strat=loop|tram|rec|pipe [proc=1] fibonacci $1
fibonacci all $1
fibonacci all time $1
" && exit 1; fi
