#!/usr/bin/env bash
set -e

blobhome="$HOME/.local/blobman"; mkdir -p "$blobhome"

if [[ ! "$1" ]]; then exit
elif [[ "$1" == 'clean' ]]; then shift
  if [[ "$1" == 'all' ]]; then rm -fvr "$blobhome"
  else 
    function clean_blobs { while [[ "$1" ]]; do rm -fv "$blobhome/$1"*; shift; done; }
    clean_blobs $@
  fi
  exit
elif [[ "$1" == 'cook' ]]; then shift
  function each_blob { 
    while [[ "$1" ]]; do
      $1 && echo "blobbed '`ls "$blobhome/$1"*`'" &
      shift
    done; wait
  }
  cooking=true each_blob $@
  exit
fi

lang="$1"
source_file="$2"
if ! [[ "$source_file" && -f "$source_file" ]]; then
  echo -e "invalid source file\n  file: $source_file\n  lang: $lang"
  exit 1
fi

shift 2
recipe='' extension='' launcher='' pipe_source=''
blob_name="$blobhome/`basename $source_file`"
blob="$blob_name.`md5sum "$source_file" | gawk '{print $1}'`"

if [[ "$lang" == 'c' ]]; then
  recipe="gcc -xc --std=c99 -o $blob" pipe_source=true
elif [[ "$lang" == 'c++' ]]; then
  recipe="g++ -xc++ -std=gnu++17 -o $blob" pipe_source=true
elif [[ "$lang" == 'go' ]]; then
  recipe="gccgo $source_file -o $blob"
elif [[ "$lang" == 'kotlin' ]]; then
  extension='.jar'; blob+="$extension" launcher='java -jar'
  recipe="kotlinc $source_file -include-runtime -d $blob" 
elif [[ "$lang" == 'kotlin-native' ]]; then
  extension='.kexe'; blob+="$extension"
  recipe="kotlinc-native $source_file -o $blob"
elif [[ "$lang" == 'objc' ]]; then
  recipe="gcc $source_file -xobjective-c `gnustep-config --objc-flags;gnustep-config --base-libs` -o $blob"
elif [[ "$lang" == 'rust' ]]; then
  recipe="rustc $source_file -o $blob"
elif [[ "$lang" == 'zig' ]]; then
  recipe="zig build-exe $source_file -femit-bin=$blob"
else
  echo "no recipe found for cooking a $lang blob :-("; exit
fi

if [[ ! -f "$blob" ]]; then
  rm -f "$blob_name"*"$extension"
  if [[ "$pipe_source" == true ]]; then
    tail -c +20 "$source_file" | $recipe -
  else
    $recipe
  fi
  chmod +x "$blob"
fi

[[ "$cooking" ]] || exec $launcher "$blob" $@
