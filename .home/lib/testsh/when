#!/usr/bin/env bash

function when { # command
    fun="$1"
    receiver=$fun'_'
    receiverCommand="$fun"
    shift
    "$@"
}

function receives { # 'arguments'
    receiver="$fun`_getHandlerName "$1"`"
    receiverCommand="$fun $1"
    shift
    "$@"
}

function thenEcho { # value
    local input="$@"
    shift
    [[ "$1" ]] && _thenEchoNext $input ||\
        _buildReciever "
              echo '$input'"
}

function thenReturn { # code
    local code='0'
    [[ "$1" ]] && let code="$1"
    _buildReciever "return $code"
}

function thenDo { # 'script'
    [[ "$1" ]] && _buildReciever "
        $@
    " || return 1
}

function _resetMocks {
    unset -f $funs
    unset funs unverifiedReceivers
}

function _thenEchoNext {
    _build "export values$receiver='$@'"

    _buildReciever "  
            [[ \$values$receiver ]] || return 1
            echo \$values$receiver | gawk '{ print \$1 }'
            function pop { shift && echo \$@; }
            values$receiver=\`pop \$values$receiver\`"
}

function _buildReciever {
    [[ "`type -t $fun`" == 'function' ]] || _build "
        # receiver: $fun
        function $fun { $fun\`_getHandlerName \"\$@\"\`
        }; export -f $fun"

    _build "
        # handler: ${receiverCommand//$'\n'/}
        function $receiver { $@
        }; export -f $receiver"
        
    [[ $targetCount ]] && _build "
        # error: ${receiverCommand//$'\n'/}
        function error_$receiver {
            echo \"call count is \$count_$receiver instead of $targetCount for
$receiverCommand\"
        }; export -f error_$receiver"

    funs="$fun $receiver error_$receiver $funs"

    unset fun receiver receiverCommand targetCount
}

function _build { 
    [[ $codegen ]] && echo "$@" >> $HOME/codegen.sh
    eval "$@"    
}

function _getHandlerName {
    printf '_'
    local rec="$@"; rec=${rec// /}
    [[ "$rec" ]] && md5sum <<< "$rec" | gawk '{ print $1 }'
}; export -f _getHandlerName
