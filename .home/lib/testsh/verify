#!/usr/bin/env bash

function verify { when "$@"; } # command

function isCalledWith { # 'arguments'
    receives "$1"
    shift
    isCalled $@
}

function isCalled { # n times
    [[ "$2" == 'time' || "$2" == 'times' ]] && targetCount="$1" || targetCount='1'

    export unverifiedReceivers="$receiver $unverifiedReceivers"
    
    _build "
        export count_$receiver=0"
    _buildReciever "
            let ++count_$receiver
            if [[ '$targetCount' == \"\$count_$receiver\" ]]; then
                export unverifiedReceivers=\${unverifiedReceivers//$receiver/}
            elif [[ \$unverifiedReceivers != *'$receiver'* ]]; then
                export unverifiedReceivers=\"\$unverifiedReceivers $receiver\"
            fi"
}

function expectVerificationFrom { # command arguments
    _injectMocksAndCall $@
    let ++runs
    if [[ ! ${unverifiedReceivers// /} ]]; then
        echo "`color cyan pass:` '$testCall' succeeded"
    else
        echo "`color mag fail:` '$testCall'";
        local rec receivers=($unverifiedReceivers)
        for rec in "${receivers[@]}"; do
            echo "`color mag +` `error_$rec`";
        done
        let ++failures
    fi
    _resetMocks
}

function _injectMocksAndCall {
    testCall="$@"
    local call=$1
    local callBody="`_getCallBody $call`"
    shift
    [[ "`type -t $call`" == 'function' ]] || _build "
        # implementation: $call
        function $call {
# start $call script
$callBody
# end $call script
        }; "
    _build "
        $call $@"
}

function _getCallBody {
    local callType="`type -t $1`"
    [[ "$callType" == 'function' ]] && echo "# `type $1`" && return
    [[ "$callType" == 'file' ]] && cat `which "$1"` | grep -v 'set -\|#!/usr/bin/env' && return
    return 1
}
